# Use pytorch to train a model to predict the next point in a ballistics trajectory
# This is a regression problem, not a classification problem
# The model is a le feed-forward neural network
# The input is the current state of the ball (position, velocity, acceleration)
# The output is the next state of the ball (position, velocity, acceleration)
# The loss function is the mean squared error between the predicted next state and the actual next state
# The optimizer is stochastic gradient descent
# The training data is generated by make_data.py
# The test data is generated by make_data.py
# The model is trained on the training data
# The model is tested on the test data
# The model is saved to a file

import torch
import torch.nn as nn

# Define the model
class Model(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(6, 16)
        self.fc2 = nn.Linear(16, 16)
        self.fc3 = nn.Linear(16, 6)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)
    

